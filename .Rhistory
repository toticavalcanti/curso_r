#saida <- paste(saida, aux, sep=", ")
}
chOrder <- intToCharacter(sort(vetOrder))
return(chOrder)
}
intToCharacter <- function(v){
lst <- character()
for(i in 1:length(v)){
lst[i] <- intToUtf8(v[i])
}
return(lst)
}
lista <- c(as.character(unlist(strsplit(str, ""))))
lista <- asciiSort(lista)
lista
str
intToCharacter <- function(v){
lst <- character()
for(i in 1:length(v)){
lst[i] <- intToUtf8(v[i])
}
return(lst)
}
asciiSort <- function(lista) {
chOrder <- character()
vetOrder <- vector()
for(i in 1:length(lista)){
vetOrder[i] <- utf8ToInt(lista[i])
}
chOrder <- intToCharacter(sort(vetOrder))
return(chOrder)
}
permute <- function(x) {
if (length(x) == 1) {
return(x)
}
else {
res <- matrix(nrow = 0, ncol = length(x))
for (i in seq_along(x)) {
res <- rbind(res, cbind(x[i], Recall(x[-i])))
}
return (res)
}
}
getPermutations <- function(str){
#transforma str em list
lst <- c(as.character(unlist(strsplit(str, ""))))
#ordena a lista
lst <- asciiSort(lst)
response <- permute(lst)
partial <- character()
aux <- (paste(c(response[1,]), collapse='' ))
partial <- paste(partial, aux, sep="")
for(i in 2:(length(response)/length(response[1,]))){
aux <- (paste(c(response[i,]), collapse='' ))
partial <- paste(partial, aux, sep=",")
}
listaAux <- unique(c(as.character(unlist(strsplit(partial, ",")))))
output <- paste( unlist(listaAux), collapse=',')
if(substring(output,1,1)  == ","){
print(substring(output,2,nchar(output)), sep="\n")
}
else{
cat(output, sep="\n")
}
}
getPermutations("Fnb6")
# Sample code to read test cases
#
#args <- commandArgs(trailingOnly=TRUE)
#test.cases <- strsplit(readLines(args[[1]], warn=FALSE), '\n')
#for (test in test.cases) {
#    if (length(test) > 0) {
#        # ignore test if it is an empty line
#        # 'test' represents the test case, do something with it
#    }
#}
intToCharacter <- function(v){
lst <- character()
for(i in 1:length(v)){
lst[i] <- intToUtf8(v[i])
}
return(lst)
}
asciiSort <- function(lista) {
chOrder <- character()
vetOrder <- vector()
for(i in 1:length(lista)){
vetOrder[i] <- utf8ToInt(lista[i])
}
chOrder <- intToCharacter(sort(vetOrder))
return(chOrder)
}
permute <- function(x) {
if (length(x) == 1) {
return(x)
}
else {
res <- matrix(nrow = 0, ncol = length(x))
for (i in seq_along(x)) {
res <- rbind(res, cbind(x[i], Recall(x[-i])))
}
return (res)
}
}
getPermutations <- function(str){
#transforma str em list
lst <- c(as.character(unlist(strsplit(str, ""))))
#ordena a lista
lst <- asciiSort(lst)
response <- permute(lst)
partial <- character()
aux <- (paste(c(response[1,]), collapse='' ))
partial <- paste(partial, aux, sep="")
for(i in 2:(length(response)/length(response[1,]))){
aux <- (paste(c(response[i,]), collapse='' ))
partial <- paste(partial, aux, sep=",")
}
listaAux <- unique(c(as.character(unlist(strsplit(partial, ",")))))
output <- paste( unlist(listaAux), collapse=',')
if(substring(output,1,1)  == ","){
print(substring(output,2,nchar(output)), sep="\n")
}
else{
cat(output, sep="\n")
}
}
getPermutations("Fnb6")
# Sample code to read test cases
#
#args <- commandArgs(trailingOnly=TRUE)
#test.cases <- strsplit(readLines(args[[1]], warn=FALSE), '\n')
#for (test in test.cases) {
#    if (length(test) > 0) {
#        # ignore test if it is an empty line
#        # 'test' represents the test case, do something with it
#    }
#}
x<-matrix(10:1,ncol=2
)
x
x<-matrix(10:1,ncol=3)
x<-matrix(12:1,ncol=3)
x
y<-cbind(x,1:5)
y<-cbind(x,1:4)
y
if (length(x) == 1) {
return(x)
}
intToCharacter <- function(v){
lst <- character()
for(i in 1:length(v)){
lst[i] <- intToUtf8(v[i])
}
return(lst)
}
asciiSort <- function(lista) {
chOrder <- character()
vetOrder <- vector()
for(i in 1:length(lista)){
vetOrder[i] <- utf8ToInt(lista[i])
}
chOrder <- intToCharacter(sort(vetOrder))
return(chOrder)
}
permute <- function(x) {
if (length(x) == 1) {
return(x)
}
else {
res <- matrix(nrow = 0, ncol = length(x))
for (i in seq_along(x)) {
res <- rbind(res, cbind(x[i], Recall(x[-i])))
}
return (res)
}
}
getPermutations <- function(str){
#transforma str em list
lst <- c(as.character(unlist(strsplit(str, ""))))
#ordena a lista
lst <- asciiSort(lst)
response <- permute(lst)
partial <- character()
aux <- (paste(c(response[1,]), collapse='' ))
partial <- paste(partial, aux, sep="")
for(i in 2:(length(response)/length(response[1,]))){
aux <- (paste(c(response[i,]), collapse='' ))
partial <- paste(partial, aux, sep=",")
}
listaAux <- unique(c(as.character(unlist(strsplit(partial, ",")))))
output <- paste( unlist(listaAux), collapse=',')
if(substring(output,1,1)  == ","){
print(substring(output,2,nchar(output)), sep="\n")
}
else{
cat(output, sep="\n")
}
}
getPermutations("Fnb6")
# Sample code to read test cases
#
#args <- commandArgs(trailingOnly=TRUE)
#test.cases <- strsplit(readLines(args[[1]], warn=FALSE), '\n')
#for (test in test.cases) {
#    if (length(test) > 0) {
#        # ignore test if it is an empty line
#        # 'test' represents the test case, do something with it
#    }
#}
mat<-matrix(nrow = 0, ncol = 3)
mat
set.seed(119)
x <- rnorm(10)
x]
x
seq_along(x)
set.seed(10)
x <- rnorm(10)
x
set.seed(214)
rnorm(5)
rnorm(5)
rnorm(5)
vet <- c(3,6,9,3,8)
vet
vet <- c(3,6,9,3,8)
for (i in seq_along(vet)){
print(i)
}
print(vet[i])
vet <- c(3,6,9,3,8)
for (i in seq_along(vet)){
print(i)
print(vet[i])
}
vet <- c(3,6,9,3,8)
for (i in seq_along(vet)){
print(i, " - " vet[i] )
}
vet <- c(3,6,9,3,8)
for (i in seq_along(vet)){
print(i, " - ", vet[i] )
}
vet <- c(3,6,9,3,8)
for (i in seq_along(vet)){
cat(i, " - ", vet[i] )
}
vet <- c(3,6,9,3,8)
for (i in seq_along(vet)){
cat(i, " - ", vet[i], ", " )
}
myFactorial <- function(n){
if(n == 1){
return(1)
}
else{
return(n*Recall(n-1))
}
}
myFactorial(5)
myFactorial(6)
myFactorial(7)
n <- 10
n
name <- "Toti"; n1 <- 13; n2 <- 150; m <- 0.7
ls()
name <- "Toti"; n1 <- 13; n2 <- 150; m <- 0.7
ls()
rm(*)
rm()
ls()
rm(list=ls(all=TRUE))
ls()
name <- "Toti"; n1 <- 13; n2 <- 150; m <- 0.7
ls()
ls(pat = "^m")
ls.str
ls.str()
M <- data.frame(n1, n2, m)
m
M
ls(pat = "^n")
?*
help("*")
help("bs")
help("bs", try.all.packages = TRUE)
help("bs", package = "splines")
apropos(help)
apropos(help)
help.start()
apropos(help)
apropos("help")
rm(list = ls ())
?lm
?*
help("*")
help("bs", package = "splines)
help("bs", package = "splines")
?lm
?*
help("*")
help("bs", package = "splines")
apropos("help")
list(lis())
list(ls())
x<-c(1,3,4,5,7,8,9)
x
y<-c(0,2,3,4,6,8,9)
y
y & !x
y && !x
y & x
a<- y & x
a
rm(list=ls())
ls()
sqrt(2) ^ 2 == 2
sqrt(3) ^ 3 == 3
sqrt(3) ^ 3
sqrt(2) ^ 2
sqrt(9)
sqrt(9)==3
sqrt(2)^2
sqrt(2)^2 == 2
1/49 * 49
1/49 * 49 == 1
1 == 1
1/49 * 49
1/49 * 49 == 1
near(sqrt(2)^2, 2)
sqrt(2)^2
sqrt(2)^2 == 2
1/49*49
1/49*49 == 1
library(dplyr)
library(dplyr)
library(tidyverse)
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
near(sqrt(2)^2, 2)
library(dplyr)
library(dplyr)
library(tidyverse)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(dplyr)
near(sqrt(2)^2,2)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(dplyr)
near(sqrt(2)^2, 2)
near(1/49*49, 1)
sqrt(2)^2 == 2
near(sqrt(2)^2, 2)
1/49*49 == 1
near(1/49*49, 1)
a=na
a = NA
a
a == NA
near(a,NA)
install.packages("dplyr")
library(dplyr)
library(dplyr)
sqrt(2)^2
2 == 2
sqrt(2)^2 == 2
1/49*49
1/49*49 == 1
near(sqrt(2)^2, 2)
sqrt(2)^2 == 2
near(1/49*49, 1)
Sigman<-matrix(c(10, 3,3,2), nrow = 2, ncol = 2)
Sigman
mu<-c(1,10)
mu
mu<-c(1, 10)
mu
x<-mvrnorm(n = 100, mu, Sigma)
library(MASS)
x<-mvrnorm(n = 100, mu, Sigma)
sigman<-matrix(c(10, 3,3,2), nrow = 2, ncol = 2)
x<-mvrnorm(n = 100, mu, Sigma)
Sigman<-matrix(c(10, 3,3,2), nrow = 2, ncol = 2)
Sigman
sigman
x<-mvrnorm(n = 100, mu, Sigma)
rm(sigman)
rm(Sigman)
Sigma<-matrix(c(10, 3,3,2), nrow = 2, ncol = 2)
x<-mvrnorm(n = 100, mu, Sigma)
x
library(ggplot2)
library(reshape2)
setAs("character","myDate", function(from)
as.Date(from, format="%d/%m/%Y") )
dados <- read.csv("PETR4_VALE5.csv",
colClasses=c('myDate','numeric','numeric'),
header = TRUE, sep = ";", dec = ",")
library(ggplot2)
library(reshape2)
setAs("character","myDate", function(from)
as.Date(from, format="%d/%m/%Y") )
dados <- read.csv("PETR4_VALE5.csv",
colClasses=c('myDate','numeric','numeric'),
header = TRUE, sep = ";", dec = ",")
install.packages('ggthemes', dependencies = TRUE)
install.packages("corrplot")
install.packages("data.table")
devtools::install_github("mbojan/alluvial")
devtools::install_github("mbojan/alluvial", build_vignettes=TRUE)
install.packages("alluvial")
install.packages("ggfortify")
install.packages("ggrepel")
install.packages("ggridges")
install.packages("VIM")
install.packages("plotly")
library(scatterplot3d)
install.packages("scatterplot3d", dependencies=TRUE)
#
#
library(scatterplot3d)
year <- rep(2008:2010, each = 4)
year
year <- rep(2008:2010)
year
year <- rep(2008:2010,3)
year
year <- rep(2008:2010, each = 4)
quarter <- rep(1:4, 3)
quarter
cpi <- c(162.2, 164.6, 166.5, 166.0,
166.2, 167.0, 168.6, 169.5,
171.0, 172.1, 173.3, 174.0)
cor(year,cpi)
cor(quarter,cpi)
fit <- lm(cpi~ year + quarter)
fit
library(scatterplot3d)
s3d <- scatterplot3d(year, quarter, cpi, highlight.3d=T,
type="h", lab=c(2,3))
cpi
library(scatterplot3d)
s3d <- scatterplot3d(year, quarter, cpi, highlight.3d=T,
type="h", lab=c(2,3))
s3d$plane3d(fit)
iris
str(iris)
iris2 <- iris[1:4]
iris2
str(iris2)
leves(iris$Species)
levels(iris$Species)
set.seed(1234) # Para reprodução posterior.
set.seed(1234) # Para reprodução posterior.
means.result <- kmeans(iris2, 3)
table(iris$Species, kmeans.result$cluster)
set.seed(1234) # Para reprodução posterior.
(kmeans.result <- kmeans(iris2, 3))
library(ggplot2)
ggplot(iris, aes(Petal.Length, Petal.Width, color =
Species)) + geom_point()
set.seed(20)
irisCluster <- kmeans(iris[, 3:4], 3, nstart = 20)
irisCluster
set.seed(20)
irisCluster <- kmeans(iris[, 3:4], 3, nstart = 20)
irisCluster
iris[, 3:4]
str(iris[, 3:4])
table(irisCluster$cluster, iris$Species)
as.factor(irisCluster$cluster)
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster)) + geom_point()
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster)) + geom_point()
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(irisCluster, aes(Petal.Length, Petal.Width, color = irisCluster$cluster)) + geom_point()
ggplot(irisCluster, aes(Petal.Length, Petal.Width, color = iris$cluster)) + geom_point()
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster)) + geom_point()
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster)) + geom_point()
table(iris$Species, kmeans.result$cluster)
iris2 <- iris[1:4]
set.seed(1234) # Para reprodução posterior.
(kmeans.result <- kmeans(iris2, 3))
table(iris$Species, kmeans.result$cluster)
plot(iris2[c("Sepal.Length", "Sepal.Width")],
col = kmeans.result$cluster)
points(kmeans.result$centers[,c("Sepal.Length",
"Sepal.Width")], col=1:3, pch=8, cex=2)
plot(iris2[c("Sepal.Length", "Sepal.Width")],
col = kmeans.result$cluster)
rm (list = ls ())
setwd("C:/Users/toti.cavalcanti/Documents/MyProjects/R_projects/curso_r")
getwd()
mydata <- scan("20180901_SPU_ImoveisFuncionais_ListaPermissionarios.csv", sep = ";",
what = list("", "", "", "", ""))
mydata
mydata02 <- read.fwf("data.txt", widths = c(1, 4, 3))
mydata02
